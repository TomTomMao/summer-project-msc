digraph "classes_pythonserver" {
rankdir=BT
charset="utf-8"
"app.Cluster.Cluster" [color="black", fontcolor="black", label=<{Cluster|dataList<br ALIGN="LEFT"/>targetNumberOfCluster<br ALIGN="LEFT"/>|<I>getClusterIdList</I>(): list<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"app.TransactionDataset.DistanceMeasure" [color="black", fontcolor="black", label=<{DistanceMeasure|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"app.TransactionDataset.FrequencyOption" [color="black", fontcolor="black", label=<{FrequencyOption|distanceMeasure : Optional[Union[DistanceMeasure, None]]<br ALIGN="LEFT"/>linkageMethod : Optional[Union[LinkageMethod, None]]<br ALIGN="LEFT"/>numberOfCluster : Optional[Union[int, None]]<br ALIGN="LEFT"/>per : Literal['month', 'day']<br ALIGN="LEFT"/>uniqueKey<br ALIGN="LEFT"/>|getDistanceMeasure()<br ALIGN="LEFT"/>getLinkageMethod()<br ALIGN="LEFT"/>getNumberOfCluster()<br ALIGN="LEFT"/>getPer(): Literal['month', 'day']<br ALIGN="LEFT"/>getUniqueKey()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"app.TransactionDataset.FrequencyUniqueKey" [color="black", fontcolor="black", label=<{FrequencyUniqueKey|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"app.Cluster.LinkageBasedStringCluster" [color="black", fontcolor="black", label=<{LinkageBasedStringCluster|VALID_DISTANCE_METRIC : list<br ALIGN="LEFT"/>VALID_LINKAGE_METHOD : list<br ALIGN="LEFT"/>dataList : list[str]<br ALIGN="LEFT"/>distanceMatrix : ndarray<br ALIGN="LEFT"/>distanceMetric : str<br ALIGN="LEFT"/>linkageMatrix<br ALIGN="LEFT"/>linkageMethod : str<br ALIGN="LEFT"/>preprocessedStringArray<br ALIGN="LEFT"/>stringPreprocessor : Callable[[str], str]<br ALIGN="LEFT"/>targetNumberOfCluster : int<br ALIGN="LEFT"/>testMode : bool<br ALIGN="LEFT"/>|getClusterIdList(targetNumberOfCluster: int): list[int]<br ALIGN="LEFT"/>getClusterInfo()<br ALIGN="LEFT"/>getDataList(): list[str]<br ALIGN="LEFT"/>getDistanceMatrix()<br ALIGN="LEFT"/>getLinkageMatrix()<br ALIGN="LEFT"/>getPreprocessedData()<br ALIGN="LEFT"/>setDataList(dataList: list[str], updateChainning: bool)<br ALIGN="LEFT"/>setDistanceMetric(distanceMetric: str, updateChainning: bool)<br ALIGN="LEFT"/>setLinkageMethod(linkageMethod: str)<br ALIGN="LEFT"/>setStringPreprocessor(stringPreprocessor: Callable[[str], str], updateChainning: bool)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"app.TransactionDataset.LinkageMethod" [color="black", fontcolor="black", label=<{LinkageMethod|name<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"app.Cluster.StringCluster" [color="black", fontcolor="black", label=<{StringCluster|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"app.TransactionDataset.TransactionDataset" [color="black", fontcolor="black", label=<{TransactionDataset|dataframe : DataFrame<br ALIGN="LEFT"/>frequencyOption<br ALIGN="LEFT"/>linkageBasedStringClusterers : dict<br ALIGN="LEFT"/>|clusterByKMeans(metric1, metric2, numberOfCluster, maxIteration: int, nInit)<br ALIGN="LEFT"/>getClusterIdOfTransactionNumber(): dict<br ALIGN="LEFT"/>getColumn(columnName, toNumerical): pd.Series<br ALIGN="LEFT"/>getColumnNames(): list<br ALIGN="LEFT"/>getDataframe(): pd.DataFrame<br ALIGN="LEFT"/>isValidColumnName(columnNameToCheck: str): bool<br ALIGN="LEFT"/>setFrequencyOption(newFrequencyOption)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"app.Cluster.LinkageBasedStringCluster" -> "app.Cluster.StringCluster" [arrowhead="empty", arrowtail="none"];
"app.Cluster.StringCluster" -> "app.Cluster.Cluster" [arrowhead="empty", arrowtail="none"];
"app.TransactionDataset.FrequencyOption" -> "app.TransactionDataset.TransactionDataset" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="frequencyOption", style="solid"];
}
